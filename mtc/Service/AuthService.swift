
import Alamofire
import KeychainAccess
import Foundation

// MARK: - TokenResponse
struct TokenResponse: Decodable {
    let accessToken: String
    let accessTokenExpiration: String
    let refreshToken: String
    let refreshTokenExpiration: String
}


struct ErrorResponse: Decodable {
    let message: String
    let code: Int
}

// MARK: - Custom Errors
enum AuthError: Error {
    case invalidResponse
    case missingToken
    case invalidCredentials
    case tokenRefreshFailed
}

// MARK: - Auth Service
class AuthService {
    static let shared = AuthService()
    private let baseURL = "https://www.smikerls.site"
    
    private init() {}
    
    // MARK: - Registration
    func register(email: String, name: String, password: String, completion: @escaping (Result<Void, Error>) -> Void) {
        let url = "\(baseURL)/account/sign-up"
        
        let parameters: [String: Any] = [
            "email": email,
            "name": name,
            "password": password
        ]
        
        print("üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞:", url)
        print("üì§ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:", parameters)
        
        AF.request(url, method: .post, parameters: parameters, encoding: JSONEncoding.default)
            .validate()
            .response { response in
                print("üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞")
                print("üîç –°—Ç–∞—Ç—É—Å –∫–æ–¥:", response.response?.statusCode ?? 0)
                
                if let data = response.data, let rawResponse = String(data: data, encoding: .utf8) {
                    print("üìú –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞:\n\(rawResponse)")
                } else {
                    print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ")
                }
                
                switch response.result {
                case .success:
                    print("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
                    completion(.success(()))
                case .failure(let error):
                    print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", error.localizedDescription)
                    completion(.failure(self.handleError(error, data: response.data)))
                }
            }
    }
    
    // MARK: - Login
    // MARK: - Login
    func login(email: String, password: String, completion: @escaping (Result<TokenResponse, Error>) -> Void) {
        let url = "\(baseURL)/Auth/sign-in"
        let parameters = SignInRequest(email: email, password: password)
        
        print("üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ª–æ–≥–∏–Ω –Ω–∞:", url)
        print("üì§ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:", parameters)
        
        AF.request(url,
                   method: .post,
                   parameters: parameters,
                   encoder: JSONParameterEncoder.default)
            .validate()
            .responseDecodable(of: TokenResponse.self) { response in
                print("üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞")
                print("üîç –°—Ç–∞—Ç—É—Å –∫–æ–¥:", response.response?.statusCode ?? 0)
                
                if let data = response.data, let rawResponse = String(data: data, encoding: .utf8) {
                    print("üìú –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞:\n\(rawResponse)")
                } else {
                    print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ")
                }
                
                switch response.result {
                case .success(let tokens):
                    print("‚úÖ –õ–æ–≥–∏–Ω —É—Å–ø–µ—à–µ–Ω! –¢–æ–∫–µ–Ω:", tokens.accessToken)
                    KeychainService.shared.save(token: tokens.accessToken, type: .access)
                    KeychainService.shared.save(token: tokens.refreshToken, type: .refresh)
                    completion(.success(tokens))
                case .failure(let error):
                    print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏–Ω–µ:", error.localizedDescription)
                    completion(.failure(self.handleError(error, data: response.data)))
                }
            }
    }

    
    func confirmEmail(email: String, code: String, completion: @escaping (Result<Void, Error>) -> Void) {
           let url = "\(baseURL)/account/email/confirmation"
           let parameters: [String: Any] = ["email": email, "code": code]

           AF.request(url, method: .post, parameters: parameters, encoding: JSONEncoding.default)
               .validate()
               .response { response in
                   switch response.result {
                   case .success:
                       completion(.success(()))
                   case .failure(let error):
                       completion(.failure(self.handleError(error, data: response.data)))
                   }
               }
       }

    
    // MARK: - 2FA Verification
    func verify2FA(code: String, completion: @escaping (Result<TokenResponse, Error>) -> Void) {
        let url = "\(baseURL)/Auth/sign-in/2fa"
        
        guard let email = KeychainService.shared.getEmail(),
              let password = KeychainService.shared.getPassword() else {
            print("‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç email –∏–ª–∏ –ø–∞—Ä–æ–ª—å –≤ Keychain")
            completion(.failure(AuthError.invalidCredentials))
            return
        }
        
        let parameters = SignInWithCodeRequest(
            email: email,
            password: password,
            code: code
        )
        
        print("üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ 2FA –Ω–∞:", url)
        print("üì§ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:", parameters)
        
        AF.request(url,
                   method: .post,
                   parameters: parameters,
                   encoder: JSONParameterEncoder.default)
            .validate()
            .responseDecodable(of: TokenResponse.self) { response in
                
                print("üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞")
                print("üîç –°—Ç–∞—Ç—É—Å –∫–æ–¥:", response.response?.statusCode ?? 0)
                
                if let data = response.data, let rawResponse = String(data: data, encoding: .utf8) {
                    print("üìú –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞:\n\(rawResponse)")
                } else {
                    print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ")
                }
                
                switch response.result {
                case .success(let tokens):
                    KeychainService.shared.save(token: tokens.accessToken, type: .access)
                    KeychainService.shared.save(token: tokens.refreshToken, type: .refresh)
                    completion(.success(tokens))
                case .failure(let error):
                    print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ 2FA:", error.localizedDescription)
                    let handledError = self.handleError(error, data: response.data)
                    print("üî¥ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:", handledError.localizedDescription)
                    completion(.failure(handledError))
                }
            }
    }
    
    // MARK: - Token Refresh
    func refreshToken(completion: @escaping (Result<TokenResponse, Error>) -> Void) {
        let url = "\(baseURL)/Auth/tokens"
        guard let refreshToken = KeychainService.shared.getToken(type: .refresh) else {
            print("‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç refresh token –≤ Keychain")
            completion(.failure(AuthError.missingToken))
            return
        }
        
        let parameters = RefreshTokenRequest(refreshToken: refreshToken)
        
        print("üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –Ω–∞:", url)
        print("üì§ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:", parameters)
        
        AF.request(url,
                   method: .post,
                   parameters: parameters,
                   encoder: JSONParameterEncoder.default)
            .validate()
            .responseDecodable(of: TokenResponse.self) { response in
                print("üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞")
                print("üîç –°—Ç–∞—Ç—É—Å –∫–æ–¥:", response.response?.statusCode ?? 0)
                
                if let data = response.data, let rawResponse = String(data: data, encoding: .utf8) {
                    print("üìú –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞:\n\(rawResponse)")
                } else {
                    print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ")
                }
                
                switch response.result {
                case .success(let tokens):
                    print("‚úÖ –¢–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω! –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω:", tokens.accessToken)
                    KeychainService.shared.save(token: tokens.accessToken, type: .access)
                    KeychainService.shared.save(token: tokens.refreshToken, type: .refresh)
                    completion(.success(tokens))
                case .failure(let error):
                    print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞:", error.localizedDescription)
                    KeychainService.shared.deleteAll()
                    completion(.failure(self.handleError(error, data: response.data)))
                }
            }
    }
    
    // MARK: - Error Handling
    private func handleError(_ error: AFError, data: Data?) -> Error {
        print("‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏...")
        
        if let data = data,
           let errorResponse = try? JSONDecoder().decode(ErrorResponse.self, from: data) {
            print("üìù –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", errorResponse.message)
            return NSError(
                domain: "APIError",
                code: errorResponse.code,
                userInfo: [NSLocalizedDescriptionKey: errorResponse.message]
            )
        }
        
        print("üõë –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫—É –∏–∑ –æ—Ç–≤–µ—Ç–∞.")
        return error
    }
}


// MARK: - Keychain Service
class KeychainService {
    static let shared = KeychainService()
    private let keychain = Keychain(service: "com.YOUR_APP_BUNDLE_ID.auth")
    
    enum TokenType: String {
        case access
        case refresh
    }
    
    func save(token: String, type: TokenType) {
        keychain[type.rawValue + "Token"] = token
    }
    
    func getToken(type: TokenType) -> String? {
        return keychain[type.rawValue + "Token"]
    }
    
    func save(email: String, password: String) {
        keychain["email"] = email
        keychain["password"] = password
    }
    
    func getEmail() -> String? {
        return keychain["email"]
    }
    
    func getPassword() -> String? {
        return keychain["password"]
    }
    
    func deleteAll() {
        keychain["accessToken"] = nil
        keychain["refreshToken"] = nil
        keychain["email"] = nil
        keychain["password"] = nil
    }
}

// MARK: - Request Models
struct SignInRequest: Encodable {
    let email: String
    let password: String
}

struct SignInWithCodeRequest: Encodable {
    let email: String
    let password: String
    let code: String
}

struct RefreshTokenRequest: Encodable {
    let refreshToken: String
}
