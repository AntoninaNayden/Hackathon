import SwiftUI

struct RegisterView: View {
    @State private var email = ""
    @State private var name = ""
    @State private var password = ""
    @State private var errorMessage = ""
    @State private var isRegistered = false
    @State private var confirmationCode = ""
    @State private var isEmailConfirmed = false
    
    var body: some View {
        NavigationStack {
            ZStack {
                Color.black.edgesIgnoringSafeArea(.all)
                FloatingImagesView()

                VStack(spacing: 16) {
                    // –í–≤–æ–¥ email
                    TextField("Email", text: $email)
                        .padding()
                        .background(Color.white.opacity(0.1))
                        .cornerRadius(8)
                        .foregroundColor(.white)

                    // –í–≤–æ–¥ –∏–º–µ–Ω–∏
                    TextField("–ò–º—è", text: $name)
                        .padding()
                        .background(Color.white.opacity(0.1))
                        .cornerRadius(8)
                        .foregroundColor(.white)

                    // –í–≤–æ–¥ –ø–∞—Ä–æ–ª—è
                    SecureField("–ü–∞—Ä–æ–ª—å", text: $password)
                        .padding()
                        .background(Color.white.opacity(0.1))
                        .cornerRadius(8)
                        .foregroundColor(.white)

                    Button("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è") {
                        AuthService.shared.register(email: email, name: name, password: password) { result in
                            switch result {
                            case .success:
                                print("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
                                KeychainService.shared.save(email: email, password: password)
                                print("üîê –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Keychain")
                                isRegistered = true
                            case .failure(let error):
                                errorMessage = error.localizedDescription
                            }
                        }
                    }
                    .padding()
                    .frame(maxWidth: .infinity)
                    .background(Color(red: 155/255, green: 5/255, blue: 3/255))
                    .foregroundColor(.white)
                    .cornerRadius(8)

                    }
                    Text(errorMessage)
                        .foregroundColor(Color(red: 155/255, green: 5/255, blue: 3/255))
                        .padding()
                        NavigationLink(destination: TwoFactorAuthView(email: email, password: password), isActive: $isRegistered) {
                            EmptyView()
                        }
                }
            }
        }
    }


#Preview {
    RegisterView()
}
